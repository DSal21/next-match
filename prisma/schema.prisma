generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  passwordHash  String
  image         String?
  accounts      Account[]
  member        Member?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Member {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String
  gender      String
  dateOfBirth DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  city        String
  country     String
  image       String?

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos  Photo[]
  likes   Like[]  @relation("sourceUser")
  likedBy Like[]  @relation("targetUser")
}

model Photo {
  id       String  @id @default(cuid())
  url      String
  publicId String?
  memberId String

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model Like {
  sourceUserId String
  targetUserId String
  sourceMember Member @relation("sourceUser", fields: [sourceUserId], references: [userId], onDelete: Cascade)
  targetMember Member @relation("targetUser", fields: [targetUserId], references: [userId], onDelete: Cascade)

  @@id([sourceUserId, targetUserId])
}
